/* Generated By:JJTree: Do not edit this line. AstStringConstant.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=Ast,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.developmentontheedge.sql.model;

import java.util.Objects;
import java.util.Set;
import java.util.function.Predicate;

public class AstStringConstant extends SimpleNode
{
    public AstStringConstant(int id)
    {
        super(id);
        nodePrefix = "'";
        nodeSuffix = "'";
    }

    public AstStringConstant(String val)
    {
        this(SqlParserTreeConstants.JJTSTRINGCONSTANT);
        setValue(val, false);
    }

    public AstStringConstant(String val, boolean safed)
    {
        this(SqlParserTreeConstants.JJTSTRINGCONSTANT);
        setValue(val, safed);
    }

    public AstStringConstant(AstStringPart stringPart)
    {
        this(SqlParserTreeConstants.JJTSTRINGCONSTANT);
        addChild(stringPart);
    }

    @Override
    protected void formatBody(StringBuilder sb, Set<Token> printedSpecials)
    {
        append(sb, getNodePrefix());
        if (children != null)
        {
            for (SimpleNode child : children)
            {
                child.format(sb, printedSpecials);
            }
        }
        sb.append(getNodeSuffix());
    }

    public String getValue()
    {
        return format().trim();
    }

    protected boolean escape = false;

    public void setEscape(boolean escape)
    {
        this.escape = escape;
        this.nodePrefix = escape ? "E'" : "'";
    }

    public boolean isEscape()
    {
        return escape;
    }

    public String getValueUnescaped()
    {
        String val = getValue();
        return val.substring(1, val.length() - 1).replace("''", "'");
    }

    public void setValue(String value, boolean safed)
    {
        if (value.startsWith("'") && value.endsWith("'"))
            value = value.substring(1, value.length() - 1);
        removeChildren();
        addChild(new AstStringPart(value, safed));
    }

    @Override
    public String toString()
    {
        return "StringConstant: " + format().trim();
    }

    @Override
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;
        if (obj == null || getClass() != obj.getClass())
            return false ;
        final AstStringConstant other = (AstStringConstant) obj;
        return Objects.equals(format().trim(), other.format().trim());
    }

    public static Predicate<SimpleNode> isString(String str)
    {
        return node -> node instanceof AstStringConstant && ((AstStringConstant) node).getValueUnescaped().equals(str);
    }

    public static int getASCII(char c)
    {
        switch (c)
        {
            case 'b':
                return 8;
            case 't':
                return 9;
            case 'n':
                return 10;
            case 'f':
                return 12;
            case 'r':
                return 13;
            default:
                throw new IllegalArgumentException("Unexpected char: " + c);
        }
    }

}
/* JavaCC - OriginalChecksum=bf133e5e4f8d86a06fb2efd3a496d8c3 (do not edit this line) */
