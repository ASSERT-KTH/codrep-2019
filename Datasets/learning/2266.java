/* Generated By:JJTree: Do not edit this line. AstTableRef.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=Ast,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.developmentontheedge.sql.model;

public class AstTableRef extends SimpleNode
{
    public AstTableRef(int id)
    {
        super(id);
    }

    public AstTableRef(String table)
    {
        this(SqlParserTreeConstants.JJTTABLEREF);
        setTable(table);
    }

    public AstTableRef(AstSelect select)
    {
        this(SqlParserTreeConstants.JJTTABLEREF);
        addChild(new AstParenthesis(select));
    }

    public AstTableRef(AstQuery query)
    {
        this(SqlParserTreeConstants.JJTTABLEREF);
        addChild(new AstParenthesis(query));
    }

    public AstTableRef(SimpleNode... childs)
    {
        this(SqlParserTreeConstants.JJTTABLEREF);
        for (SimpleNode child : childs)
            addChild(child);
    }

    public AstTableRef(boolean as, SimpleNode... childs)
    {
        this(SqlParserTreeConstants.JJTTABLEREF);
        this.as = as;
        for (SimpleNode child : childs)
            addChild(child);
    }

    public static AstTableRef as(SimpleNode... childs)
    {
        assert childs.length == 2;
        return new AstTableRef(true, childs);
    }

    public static AstTableRef as(String... childs)
    {
        assert childs.length == 2;
        return new AstTableRef(true, new AstTableName(childs[0]), new AstIdentifierConstant(childs[1], true));
    }

    private boolean as;

    public String getTable()
    {
        if (hasSelect() || !(children.get(0) instanceof AstTableName))
            return null;
        return getTableNode().getValue();
    }

    public void setTable(String table)
    {
        getTableNode().setValue(table);
    }

    private AstTableName getTableNode()
    {
        if (children.isEmpty())
        {
            AstTableName node = new AstTableName(SqlParserTreeConstants.JJTTABLENAME);
            addChild(node);
            return node;
        }
        return (AstTableName) children.get(0);
    }

    public String getAlias()
    {
        if (children.size() > 1 && children.get(children.size() - 1) instanceof AstIdentifierConstant)
            return ((AstIdentifierConstant) children.get(children.size() - 1)).getNodeContent();
        return null;
    }

    public boolean getAsToken()
    {
        return as;
    }

    protected boolean hasSelect()
    {
        return !children.isEmpty() && children.get(0) instanceof AstNestedQuery;
    }

    public void setAsToken(boolean as)    {
        this.as = as;
    }

    @Override
    public String getChildrenDelimiter(SimpleNode prev, SimpleNode next)
    {
        return as && !(next instanceof AstColumnList) ? "AS" : null;
    }
}
/* JavaCC - OriginalChecksum=113ae3b1ee83260582e6c1f3411bf4c0 (do not edit this line) */
