/* Generated By:JJTree: Do not edit this line. AstFrom.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=Ast,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.developmentontheedge.sql.model;

import one.util.streamex.StreamEx;

import java.util.Optional ;


public class AstFrom extends SimpleNode
{
    public AstFrom(int id)
    {
        super(id);
        this.nodePrefix = "FROM";
    }

    public AstFrom(AstTableRef... children)
    {
        this(SqlParserTreeConstants.JJTFROM);
        for (AstTableRef child : children)
            addChild(child);
    }

    public boolean isDual()
    {
        return children.size() == 1 && children.get(0) instanceof AstTableRef
                && "DUAL".equalsIgnoreCase(((AstTableRef) children.get(0)).getTable());
    }

    public StreamEx<AstTableRef> tableRefs()
    {
        return children().select(AstTableRef.class);
    }

    @Override
    public String getChildrenDelimiter(SimpleNode prev, SimpleNode next)
    {
        return next instanceof AstTableRef ? "," : null;
    }

    public static AstFrom createDual()
    {
        return new AstFrom(new AstTableRef("DUAL"));
    }

    public Optional<AstTableRef> getTableRef(String tableName)
    {
        return tree().select(AstTableRef.class).findFirst(ref -> tableName.equalsIgnoreCase(ref.getTable()));
    }

    public Optional<String> getTableAlias(String tableName)
    {
        AstTableRef tableRef = getTableRef(tableName).orElse(null);
        if (tableRef == null)
            return Optional.empty();
        String alias = tableRef.getAlias();
        return Optional.of(alias == null ? tableName : alias);
    }
}
/* JavaCC - OriginalChecksum=5b6162891e149ef34c67fedf70e3d21c (do not edit this line) */
