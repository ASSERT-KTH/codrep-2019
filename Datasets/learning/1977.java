/* Generated By:JJTree: Do not edit this line. AstSelect.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=Ast,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.developmentontheedge.sql.model;

import one.util.streamex.IntStreamEx;

import java.util.Collections;
import java.util.Map;
import java.util.Objects;

public class AstSelect extends SimpleNode
{
    public AstSelect(int id)
    {
        super(id);
        this.nodePrefix = "SELECT";
    }

    public AstSelect(AstSelectList list, AstFrom from, AstWhere where)
    {
        this(SqlParserTreeConstants.JJTSELECT);
        addChild(list);
        addChild(from);
        if (where != null) addChild(where);
    }

    public AstSelect(AstSelectList list, AstFrom from)
    {
        this(SqlParserTreeConstants.JJTSELECT);
        addChild(list);
        addChild(from);
    }

    private SetQuantifier setQuantifier = SetQuantifier.DEFAULT;

    public SetQuantifier getQuantifier()
    {
        return setQuantifier;
    }

    public void setQuantifier(SetQuantifier setQuantifier)
    {
        this.setQuantifier = Objects.requireNonNull(setQuantifier);
        if (setQuantifier == SetQuantifier.DEFAULT)
            this.nodePrefix = "SELECT";
        else
            this.nodePrefix = "SELECT " + setQuantifier;
    }

    public AstSelectList getSelectList()
    {
        return children().select(AstSelectList.class).findFirst().get();
    }

    public AstFrom getFrom()
    {
        return children().select(AstFrom.class).findFirst().orElse(null);
    }

    public void from(AstFrom from)
    {
        if (from != null)
            from.jjtSetParent(this);
        int idx = IntStreamEx.ofIndices(children, AstSelectList.class::isInstance).findFirst().getAsInt();
        if (children.size() > idx + 1 && children.get(idx + 1) instanceof AstFrom)
        {
            if (from == null)
                children.remove(idx + 1);
            else
                children.set(idx + 1, from);
        }
        else
        {
            if (from != null)
                children.add(idx + 1, from);
        }
    }

    public AstWhere getWhere()
    {
        return children().select(AstWhere.class).findFirst().orElse(null);
    }

    public AstSelect where(String key, Object value)
    {
        Objects.requireNonNull(key);
        Objects.requireNonNull(value);
        where(Collections.singletonMap(key, value));
        return this;
    }

    public AstSelect where(Map<String, ?> conditions)
    {
        Objects.requireNonNull(conditions);
        if (!conditions.isEmpty()) where(new AstWhere(conditions));
        return this;
    }

    public void where(AstWhere where)
    {
        Objects.requireNonNull(where);
        AstWhere oldWhere = getWhere();
        if (oldWhere == null)
        {
            SimpleNode prev = getFrom();
            if (prev == 
null)
                prev = getSelectList();
            prev.appendSibling(where);
        }
        else
        {
            oldWhere.replaceWith(where);
        }
    }

    public AstGroupBy getGroupBy()
    {
        return children().select(AstGroupBy.class).findFirst().orElse(null);
    }

    public AstLimit getLimit()
    {
        return children().select(AstLimit.class).findFirst().orElse(null);
    }

    public AstSelect limit(int offset, int count)
    {
        AstLimit limit = AstLimit.of(offset, count);
        AstLimit oldLimit = children().select(AstLimit.class).findFirst().orElse(null);
        if (oldLimit != null)
        {
            oldLimit.replaceWith(limit);
        }
        else
        {
            addChild(limit);
        }
        return this;
    }

    public AstSelect limit(int count)
    {
        return limit(0, count);
    }

    public AstOrderBy getOrderBy()
    {
        return children().select(AstOrderBy.class).findFirst().orElse(null);
    }

    public void dropOrder()
    {
        children.removeIf(AstOrderBy.class::isInstance);
    }

    public void dropLimit()
    {
        children.removeIf(AstLimit.class::isInstance);
    }
}
